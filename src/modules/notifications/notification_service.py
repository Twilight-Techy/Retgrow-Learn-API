# src/notifications/notification_service.py

from typing import List, Optional
import uuid
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from src.models.models import Notification

async def get_notifications(user_id: str, db: AsyncSession) -> List[Notification]:
    """
    Retrieve all notifications for a given user.
    """
    stmt = select(Notification).where(Notification.user_id == user_id).order_by(Notification.created_at.desc())
    result = await db.execute(stmt)
    notifications = result.scalars().all()
    return notifications

async def mark_notification_as_read(notification_id: str, user_id: str, db: AsyncSession) -> bool:
    """
    Mark the specified notification as read, ensuring it belongs to the given user.
    """
    stmt = select(Notification).where(Notification.id == notification_id, Notification.user_id == user_id)
    result = await db.execute(stmt)
    notification = result.scalars().first()
    if not notification:
        return False
    notification.read = True
    db.add(notification)
    await db.commit()
    return True

async def create_notification(user_id: str, notif_type: str, message: str, db: AsyncSession):
    """
    Create a notification record for a user.
    """
    new_notification = Notification(
        id=uuid.uuid4(),  # Omit if auto-generated by your model
        user_id=user_id,
        type=notif_type,
        message=message,
        read=False,
    )
    db.add(new_notification)
    await db.commit()
    await db.refresh(new_notification)
    return new_notification